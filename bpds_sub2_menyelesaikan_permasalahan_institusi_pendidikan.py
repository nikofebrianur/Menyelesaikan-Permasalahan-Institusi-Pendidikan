# -*- coding: utf-8 -*-
"""BPDS_Sub2_Menyelesaikan Permasalahan Institusi Pendidikan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VdJlOOX-2Aodpvbb7erBmPKjEN3vaeB7

# Inisialisasi dan Load Dataset
Tahap ini memuat library yang dibutuhkan dan membaca dataset utama yang digunakan untuk analisis. Dataset berisi data mahasiswa dari Jaya Jaya Institut, termasuk status akademik, performa semester awal, dan variabel sosial ekonomi.
"""

import pandas as pd

df = pd.read_csv('/content/data.csv', sep=';')
df.head()

"""# Data Understanding dan EDA Awal
Pada tahap ini dilakukan eksplorasi data awal, termasuk pengecekan dimensi dataset, struktur kolom, tipe data, dan distribusi kategori target (`Status`). EDA awal membantu mengidentifikasi ketidakseimbangan kelas serta potensi insight awal sebelum preprocessing.

"""

# Cek dimensi dataset
print("Jumlah baris dan kolom:", df.shape)

# Info tipe data & missing values
df.info()

# Lihat 5 baris pertama
df.head()

# Cek jumlah masing-masing status
df['Status'].value_counts()

"""# Data Cleaning & Preprocessing
Tahapan ini fokus pada:
- Menangani missing values (jika ada)
- Menghapus kolom yang tidak relevan
- Encoding data kategorikal
- Normalisasi fitur numerik menggunakan StandardScaler

Langkah ini bertujuan menyiapkan data agar sesuai format input untuk model machine learning.

"""

df.isnull().sum()

df.describe()

low_cardinality_cols = [col for col in df.columns if df[col].nunique() <= 10]
print("Kolom kandidat kategorikal:", low_cardinality_cols)

drop_cols = ['Application_mode', 'Application_order', 'Daytime_evening_attendance', 'Nacionality']
df.drop(columns=drop_cols, inplace=True)

df_raw = df.copy()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df['Status_encoded'] = le.fit_transform(df['Status'])  # Graduate, Dropout, Enrolled â†’ 0/1/2

categorical_cols = df.select_dtypes(include='object').columns.drop('Status')  # kecuali kolom target asli

from sklearn.preprocessing import LabelEncoder
le_cat = LabelEncoder()

for col in categorical_cols:
    df[col] = le_cat.fit_transform(df[col])

from sklearn.preprocessing import StandardScaler

# Drop kolom target dari kolom numerik
numerical_cols = df.select_dtypes(include='int64').columns.drop('Status_encoded')

scaler = StandardScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

df_looker = df.copy()
df_looker['Gender'] = df_raw['Gender'].map({0: 'Female', 1: 'Male'})
df_looker['Scholarship_holder'] = df_raw['Scholarship_holder'].map({0: 'No', 1: 'Yes'})
df_looker['Tuition_fees_up_to_date'] = df_raw['Tuition_fees_up_to_date'].map({0: 'Not yet', 1: 'Paid'})
df_looker['Status'] = df['Status_encoded'].map({0: 'Graduate', 1: 'Dropout', 2: 'Enrolled'})

# Drop kolom yang tidak dipakai
df_looker.drop(columns=['Status_encoded'], inplace=True)

# Simpan ke CSV baru
df_looker.to_csv('df_looker_studio_clean.csv', index=False)

from google.colab import files
files.download('df_looker_studio_clean.csv')

print("Shape fitur:", X.shape)
print("Shape label:", y.shape)
X.head()
y.value_counts()

"""# Feature Selection & Correlation Analysis

Analisis korelasi dilakukan untuk mengetahui seberapa besar hubungan antara fitur dan target (`Dropout`). Korelasi ini digunakan untuk membantu pemilihan fitur yang relevan dan mengurangi noise sebelum pemodelan.
"""

selected_features = [
    'Age_at_enrollment',
    'Tuition_fees_up_to_date',
    'Scholarship_holder',
    'Admission_grade',
    'Curricular_units_1st_sem_enrolled',
    'Curricular_units_1st_sem_approved'
]

X = df[selected_features]
y = df['Status_encoded']

import matplotlib.pyplot as plt
import seaborn as sns

# Fokus pada fitur yang digunakan dalam modeling
selected_features = [
    'Age_at_enrollment',
    'Tuition_fees_up_to_date',
    'Scholarship_holder',
    'Admission_grade',
    'Curricular_units_1st_sem_enrolled',
    'Curricular_units_1st_sem_approved',
    'Status_encoded'
]

# Hitung korelasi hanya untuk kolom terpilih
plt.figure(figsize=(8, 6))
sns.heatmap(df[selected_features].corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix Fitur Terpilih", fontsize=14)
plt.xticks(rotation=30)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

"""# Modeling & Evaluation
Model klasifikasi dibangun menggunakan algoritma seperti Logistic Regression. Dataset dibagi menjadi data latih dan uji. Hasil evaluasi ditampilkan dalam bentuk:
- Confusion matrix
- Classification report (precision, recall, f1-score)
- Akurasi total model

Tujuannya adalah mengukur seberapa baik model mampu memprediksi status mahasiswa.
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(
    multi_class='multinomial', solver='lbfgs', max_iter=1000
)
model.fit(X_train, y_train)

from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Prediksi
y_pred = model.predict(X_test)

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=le.classes_,
            yticklabels=le.classes_)
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Classification Report
print(classification_report(y_test, y_pred, target_names=le.classes_))

"""# Simpan Model ke .pkl (Pickle Format)

Model yang telah dilatih disimpan dalam format pickle (`.pkl`) agar dapat digunakan kembali dalam aplikasi berbasis Streamlit. Hal ini memungkinkan deployment dan pengujian ulang tanpa perlu melatih model dari awal.


"""

import pickle

# Simpan model
with open('student_dropout_model.pkl', 'wb') as f:
    pickle.dump(model, f)

# Simpan label encoder jika nanti mau tampilkan nama kelas hasil prediksi
with open('label_encoder.pkl', 'wb') as f:
    pickle.dump(le, f)

from google.colab import files
files.download('student_dropout_model.pkl')
files.download('label_encoder.pkl')